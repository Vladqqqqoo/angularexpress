#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('expresssquirrel:server');
const http = require('http');
const database = require('../modules/database');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

const io = require('socket.io').listen(server);

io.on('connection', (socket) => {
    console.log('new connection made');

    socket.on('join room', (data) => {
        socket.join(data.room);
        console.log(data.user + ' joined the room: ' + data.room);
        socket.broadcast.to(data.room).emit('new user joined', {user: data.user, message: 'has joined this room'});
    });

    socket.on('leave room', (data) => {
        console.log(data.user + ' left the room: ' + data.room);
        socket.broadcast.to(data.room).emit('left room', {user: data.user, message: 'has left this room'});
        socket.leave(data.room);
    });

    socket.on('message', (data) => {
        console.log(`got new message`);
        console.log(data);
        io.in(data.room).emit('new message', {user: data.user, message: data.message});
    });

    socket.on('disconnect', function (data) {
        console.log('disconnect');
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

database()
    .then((info) => {
        console.log(`Connected to ${info.host}:${info.port}/${info.name}`);
        server.listen(port, () => console.log('Example app listening on port 3000!'));
    })
    .catch((error) => {
        console.log(`Eror! - ${error.name}`);
        process.exit(1);
    });

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
